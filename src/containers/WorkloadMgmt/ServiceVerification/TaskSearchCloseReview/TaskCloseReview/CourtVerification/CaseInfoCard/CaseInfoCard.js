import React, { Component } from 'react';
import styles from './CaseInfoCard.module.scss';
import cx from 'classnames';
import _ from 'lodash';
import { connect } from 'react-redux';
///icons
// import dropdown from '../../../../assets/icons/dropdownArrow.svg';
import report from '../../../../../../../assets/icons/report.svg';
import greyWarningMid from '../../../../../../../assets/icons/greyWarningMid.svg';
import verifyYellow from '../../../../../../../assets/icons/verifyYellow.svg';
import verifyGreen from '../../../../../../../assets/icons/verifyGreen.svg';
import inactiveVerify from '../../../../../../../assets/icons/onhold.svg';
import attach from '../../../../../../../assets/icons/attach.svg';
import removeAttachment from '../../../../../../../assets/icons/removeAttachment.svg';
import chatIcon from '../../../../../../../assets/icons/chat.svg';
import downArrow from '../../../../../../../assets/icons/downArrow.svg';
import inactivePlus from "../../../../../../../assets/icons/inactivePlus.svg";
import autoGenerated from '../../../../../../../assets/icons/autoGenerated.svg';
import themes from '../../../../../../../theme.scss';
import Upload from '../../../../../../../components/Molecule/UploadDoc/UploadDoc';
import Modal from '../../CommentsSection/VerificationModal/VerificationModal';
import * as actions from '../../../../../Store/action';
import { withTranslation } from 'react-i18next';

var I = 0;

class CaseInfoCard extends Component {
    state = {
        dropdownIcon: downArrow,
        selectedComment: 'add comment',
        verificationStatusIcon:inactivePlus,
        commentBackground: themes.warningBackground,
        showDropdown: false,
        attachedFile: [],
        relevant: false,
        crc:{},
        attachmentUrl:[],
    }

    componentDidMount = () => {
        if (!_.isEmpty(this.props.matchedData)) {
            this.setState({ relevant: this.props.matchedData.relevant })
        }
        if(!_.isEmpty(this.props.data) && !_.isEmpty(this.props.data.crc)){
            this.setState({ crc: this.props.data.crc })
        }

        if(!_.isEmpty(this.props.matchedData)){
            let updatedAttachedUrl = this.state.attachmentUrl;
            let updatedAttachedFiles = this.state.attachedFile;
            let updatedComment = this.state.selectedComment;
            if(!_.isEmpty(this.props.matchedData.attachments)){
                updatedAttachedUrl = [...this.props.matchedData.attachments];
                _.forEach(updatedAttachedUrl, function(value) {
                    let attachObject = {"name" : "", "url" : ""};
                    attachObject.url = value;
                    attachObject.name = value.split('/').pop();
                    updatedAttachedFiles.push(attachObject)
                })
            }
            if(!_.isEmpty(this.props.matchedData.comments)){
                updatedComment = this.props.matchedData.comments[0];
            }
            this.setState({attachmentUrl : updatedAttachedUrl,attachedFile : updatedAttachedFiles,selectedComment: updatedComment})
        }
    }
    componentDidUpdate = (prevProps) =>{
        if(prevProps.attachmentUrlState !== this.props.attachmentUrlState && this.props.attachmentUrlState === "SUCCESS" && this.props.uploadType === "CRC"){
            
            if(!_.isEmpty(this.props.matchedData) && this.props.matchedData.id === this.props.dataId) {
                
                let updateAttachmentUrl = [...this.state.attachmentUrl];
                let updatedAttachedFiles = [...this.state.attachedFile];
                if(!_.isEmpty(this.props.attachmentUrl)){
                    
                    let n = prevProps.attachmentUrl.length - this.props.attachmentUrl.length
                    updateAttachmentUrl = this.state.attachmentUrl.length !==0 ? [...this.state.attachmentUrl,...this.props.attachmentUrl.slice(n,)]: [...this.props.attachmentUrl.slice(n,)];

                    if(!_.isEmpty(updateAttachmentUrl) && this.state.attachmentUrl.length !== updateAttachmentUrl.length){
                        let imageObj = {"name" : "image_", "url": ""}

                        imageObj.url = this.props.attachmentUrl.slice(-1)
                        if(this.props.attachmentUrl.slice(-1)[0].slice(-3) === 'pdf'){
                            imageObj.name = "pdf_" + (I)
                        }
                        else{
                            imageObj.name = "image_" + (I)
                        }

                        updatedAttachedFiles.push(imageObj);
                        this.setState({attachmentUrl: [...updateAttachmentUrl] ,attachedFile: updatedAttachedFiles})
                        this.props.handleMatchedCaseAttachments(this.props.index, updateAttachmentUrl)
                    }
                }
            }
        }
        if(prevProps.deleteDocumentState !== this.props.deleteDocumentState && this.props.deleteDocumentState === "SUCCESS" && this.props.deleteType === "CRC"){
            this.props.handleMatchedCaseDeleteAttachments(this.props.index, this.state.attachmentUrl)
        }

        if(!_.isEmpty(this.props.matchedData) && prevProps.matchedData !== this.props.matchedData){
            let updatedAttachedUrl = this.state.attachmentUrl;
            let updatedAttachedFiles = this.state.attachedFile;
            let updatedComment = this.state.selectedComment;
            if(!_.isEmpty(this.props.matchedData.attachments)){
                _.forEach(updatedAttachedUrl, function(value) {
                    let attachObject = {"name" : "", "url" : ""};
                    attachObject.url = value;
                    attachObject.name = value.split('/').pop();
                    updatedAttachedFiles.push(attachObject)
                })
            }
            if(!_.isEmpty(this.props.matchedData.comments)){
                updatedComment = this.props.matchedData.comments[0];
            }
            this.setState({attachmentUrl : updatedAttachedUrl,attachedFile : updatedAttachedFiles,selectedComment: updatedComment})
        }
    }

    handleDropdown = () => {
        let showDropdown = this.state.showDropdown;
        showDropdown = !showDropdown;
        this.setState({ showDropdown: showDropdown, submitSucess: false })
    }


    handleRadioButton = (event, inputIdentifier) => {
        let updatedRelevantCase;
        if (inputIdentifier === 'relevant') {
            updatedRelevantCase = true;
        }
        else {
            updatedRelevantCase = false
        }

        this.setState({ relevant: updatedRelevantCase })
        this.props.handleRelevant(this.props.index,updatedRelevantCase);

    }
    
    uploadFile = (file, dataId) => {
        if(this.props.seconds!==0){
            let formData = new FormData();
            for (let i = 0; i < file.length; i++) {
                formData.append('file', file[i]);
                I++
            }
            
            this.props.onImageAdded("CRC", formData,this.props.data.serviceRequestId , dataId);
            // this.setState({ attachedFile: updatedAttachedFiles})
        }
    }

    handleDeleteFile = (targetIndex) => {
        if(this.props.seconds !==0){
            if(I===targetIndex){
                I--
            }
            let updatedAttachedFile = this.state.attachedFile.filter((url, index) => {
                if (index === targetIndex) return null;
                else return url;
            })
            this.setState({
                attachedFile: updatedAttachedFile,
            })
            let updatedAttachmentUrl = this.state.attachmentUrl.filter((url, index) => {
                if (index === targetIndex) return null;
                else return url;
            })

            if(!_.isEmpty(this.state.attachmentUrl[targetIndex]) && updatedAttachmentUrl.length !== this.state.attachmentUrl.length)
            {
                this.props.onImageDeleted("CRC",'',this.state.attachmentUrl[targetIndex].split('/').pop(),this.state.attachmentUrl[targetIndex])
                this.setState({ attachedFile: updatedAttachedFile,
                    attachmentUrl: updatedAttachmentUrl })
            }
        }   
    }

    getCommentData = (commentsFromModal) => {
        let comment = commentsFromModal.writtenComment !== '' ? commentsFromModal.writtenComment : commentsFromModal.selectedComment;
        let color = commentsFromModal.selectedCommentCase;
        this.handleCommentCase(comment,color);
    }

    handleCommentCase = (comment) => {
        this.props.handleApiResponseComment(this.props.index,comment);
        this.setState({
            selectedComment: comment,
            showDropdown: false,
            verificationStatusIcon: chatIcon,
        })
    }
    
    fullName = (onboardingEntity) => {
        // let finalName = onboardingEntity.firstName + " " + onboardingEntity.middleName + " " + onboardingEntity.lastName;
        let finalName = onboardingEntity.fullName
        return finalName;
    }

    shortenDisplayName = (displayName) => {        
        if (displayName.length > 12) {
            const updatedDisplayName = displayName.substring(0, 6) + '...';
            return (updatedDisplayName);
        }
        return (displayName);
    }

    verifyIcon =(match) =>{
        if(this.props.seconds !== 0){
            if(  match <100){
                return {"icon":verifyYellow ,"color": styles.yellowMatch}
            }
            else if(match === 100){
                return {"icon":verifyGreen ,"color": styles.greenMatch}
            }
        }
        else{
            return {"icon":inactiveVerify ,"color": styles.redMatch}
        }
    }

    openNewTab = (url) => {
        if(!_.isEmpty(url) && this.props.seconds!==0)
        {
            window.open(process.env.REACT_APP_PLATFORM_BASE_URL + process.env.REACT_APP_WORKLOAD_MGMT_IMG_URL+'/' + url)
        }
    }

    handleDownload = (url) => {
        this.props.downloadAttachment(url)
    }

    getAge = (date) => {
        var today = new Date();
        var birthDate = new Date(date);
        var age = today.getFullYear() - birthDate.getFullYear();
        var m = today.getMonth() - birthDate.getMonth();
        if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
          age = age - 1;
        }
        return age;
      }
    
    render() {
        const { t } = this.props;
        // let yellowIcon = !_.isEmpty(this.props.matchedData.nameMatchPercent) ? 0<parseFloat(this.props.matchedData.nameMatchPercent)<100 ? <img className={styles.verifyIcon} src={this.state.seconds !== 0 ? verifyYellow : inactiveVerify} alt='yellow' />: null:null
        let attachmentList = this.state.attachedFile ? this.state.attachedFile.map((attachment, attachmentIndex) => {
            return (
                <label key={attachmentIndex} className={cx(styles.Attachment, 'ml-2')}>
                    <span className = {styles.hoverHand}  onClick={this.props.downloadAttachmentState === 'LOADING' ? null : () => this.handleDownload(attachment.url)} disabled={this.props.seconds===0}>
                        <img src={attach} height='12px' alt='' />&ensp;{this.shortenDisplayName(attachment.name)}
                    </span>
                    <img src={removeAttachment} height='10px' className={cx('ml-4', styles.hoverHand)} alt='' onClick={() => this.handleDeleteFile(attachmentIndex)} />
                </label>
            )
        }) : null

        return (
            <div className={cx(this.props.seconds!==0? styles.CardLayout : styles.CardLayoutInactive, 'row card d-flex flex-column')} disabled={(this.props.seconds === 0)}>
                <div className={cx('d-flex flex-row justify-content-between', styles.CardHeading)}>
                    <div className='d-inline-block' style={{ padding: '0.6rem' }} >
                        <img src={greyWarningMid} alt=''/>
                        <label className={this.props.seconds!==0? styles.HeadingText : styles.HeadingTextInactive}>{this.props.matchedData.case_category + ' case, ' + this.props.matchedData.court_name + ", " + this.props.matchedData.dist_name}</label>
                    </div>

                    <div>
                        <img src={report} alt='' style={{ padding: '0.8rem', cursor: 'pointer' }} onClick={() => window.open(this.props.matchedData.link)} />
                    </div>
                </div>
                <div className={cx(styles.CardPadding, 'card-body')}>
                    <div className='d-flex flex-row justify-content-start'>
                        <div className='flex-column col-5'>
                            <div>
                                <label className={this.props.seconds !== 0 ? styles.ApiText : styles.ApiTextInactive}>
                                    {this.props.matchedData.matched_name}
                                    {this.props.matchedData.nameMatchPercent ?
                                        <label className={cx(styles.matchText, this.verifyIcon(this.props.matchedData.nameMatchPercent).color)}>
                                            {" (" + this.props.matchedData.nameMatchPercent + "% match)"}
                                        </label> : null}
                                </label>

                            </div>
                            <div>
                                <label className={this.props.seconds!==0? styles.profileText: styles.profileTextInactive}>
                                    {this.fullName(this.state.crc)} 
                                    {this.props.matchedData.nameMatchPercent ? 
                                        <img className={"ml-1"} 
                                            src={cx(this.verifyIcon(this.props.matchedData.nameMatchPercent).icon)} 
                                            alt='' 
                                        /> 
                                    : null }
                                </label>

                            </div>
                            <div><label className={this.props.seconds!==0 ? styles.Label: styles.LabelInactive}>{t('translation_docVerification:crc.type')}</label> </div>
                        </div>
                        {!_.isEmpty(this.state.crc) && !_.isEmpty(this.state.crc.fatherName) ? 
                            <div className='flex-column'>
                                <div className={styles.height}/>
                                <div>
                                    <label className={this.props.seconds!==0? styles.profileText: styles.profileTextInactive}>{this.state.crc.fatherName}</label>
                                </div>
                                <div><label className={this.props.seconds!==0 ? styles.Label: styles.LabelInactive}>{'father\'s name'}</label> </div>
                            </div>
                        : null}
                    </div>

                    {!_.isEmpty(this.state.crc) && !_.isEmpty(this.state.crc.dob) ? 
                        <div className='flex-column col-5 mt-2'>
                            <div>
                                <label className={this.props.seconds!==0? styles.profileText: styles.profileTextInactive}>
                                    {this.state.crc.dob} ( {this.getAge(this.state.crc.dob)} y)
                                </label>
                            </div>
                            <div><label className={this.props.seconds!==0 ? styles.Label: styles.LabelInactive}>{'date of birth'}</label> </div>
                        </div>
                    : null}

                    <div className='d-flex pt-2 flex-row justify-content-start'>
                        <div className='flex-column col-7'>
                            <div>
                                <label className={this.props.seconds!==0? styles.ApiText: styles.ApiTextInactive}>
                                    {this.props.matchedData.matched_address} 
                                    {!_.isEmpty(this.props.matchedData.addressMatchPercent)? 
                                        <label className={cx(this.verifyIcon(this.props.matchedData.addressMatchPercent).color,styles.matchText)}>{"("+this.props.matchedData.addressMatchPercent+'% match)'}</label>
                                    : null}
                                </label>

                            </div>
                            <div>
                                <label className={this.props.seconds!==0? styles.profileText: styles.profileTextInactive}>
                                { 
                                    (!_.isEmpty(this.state.crc.addressLine1) ? this.state.crc.addressLine1+", " : "") + 
                                    (!_.isEmpty(this.state.crc.addressLine2) ? this.state.crc.addressLine2+", " : "") + 
                                    (!_.isEmpty(this.state.crc.landmark) ? this.state.crc.landmark+ ", " : "") +
                                    (!_.isEmpty(this.state.crc.city) ?  this.state.crc.city + ", "  : "") +
                                    (!_.isEmpty(this.state.crc.pincode) ?this.state.crc.pincode : "")
                                }
                                    {this.props.matchedData.addressMatchPercent?  
                                        <img className={"ml-1"} 
                                            src={this.verifyIcon(this.props.matchedData.addressMatchPercent).icon} 
                                            alt='' 
                                        /> 
                                    : null}
                                </label>

                            </div>
                            <div>
                                <label className={this.props.seconds!==0 ? styles.Label: styles.LabelInactive}>{t('translation_docVerification:crc.address')}</label>
                            </div>
                        </div>

                        <div className='flex-column col-5'>
                            <div>
                                <label className={this.props.seconds!==0? styles.ApiText: styles.ApiTextInactive}>
                                    {this.props.matchedData.dist_name + ', ' + this.props.matchedData.state_name} 
                                    {this.props.matchedData.locationMatchPercent ? 
                                        <label className={cx(this.verifyIcon(this.props.matchedData.locationMatchPercent).color,styles.matchText)}> {"("+this.props.matchedData.locationMatchPercent +'% match)' }</label>
                                    : null}
                                </label>
                            </div>
                            <div>
                                <label className={this.props.seconds!==0? styles.profileText: styles.profileTextInactive}>
                                    {this.state.crc.district + ", " + this.state.crc.state}
                                    {this.props.matchedData.locationMatchPercent ? 
                                        <img className={"ml-1"} 
                                            src={this.verifyIcon(this.props.matchedData.locationMatchPercent).icon} 
                                            alt='' 
                                        /> 
                                    : null }
                                </label>
                            </div>
                            <div><label className={this.props.seconds!==0 ? styles.Label: styles.LabelInactive}>{t('translation_docVerification:crc.district')}</label> </div>
                        </div>

                    </div>
                    <hr className={styles.horizontalLine} />
                    <div className='row no-gutters d-flex justify-content-between'>
                        <div className='d-flex flex-column col-9'>
                            <label className={this.props.seconds!==0 ? styles.smallText: styles.smallTextInactive}>{t('translation_docVerification:crc.comments')}</label>
                            <div className='d-flex flex-row pb-2'>
                                <div className={cx(this.props.seconds!==0 ? styles.autoCommentContainer: styles.autoCommentContainerInactive,'mr-2')}>
                                    <img src={autoGenerated} alt=''/>
                                    <span className={this.props.seconds!==0 ? styles.autoComment: styles.autoCommentInactive}>{this.props.matchedData.under_acts}</span>
                                </div>
                                <div className={cx(this.props.seconds!==0 ? styles.autoCommentContainer: styles.autoCommentContainerInactive)}> 
                                    <img src={autoGenerated} alt=''/>
                                    <span className={this.props.seconds!==0 ? styles.autoComment: styles.autoCommentInactive}>{this.props.matchedData.under_sections}</span>
                                </div>

                            </div>
                            <div>
                                <label className={ this.state.selectedComment === 'add comment' ? this.props.seconds !== 0 ? styles.Background  : styles.BackgroundInactive: cx(styles.Background, this.state.commentBackground)} onClick={this.handleDropdown}>
                                    <img className={cx(styles.addCommentImg)} src={this.state.verificationStatusIcon} alt='plus' />
                                    <span className='mt-1'>&ensp;{this.state.selectedComment} &ensp;</span>
                                    <img src={this.state.dropdownIcon} style={{ float: "right", marginTop: ".4rem" }} alt='dropdown' />
                                </label>
                            </div>
                            {this.state.showDropdown && this.props.seconds!==0?
                                <Modal 
                                    toggle={this.handleDropdown}
                                    submitData={this.getCommentData}
                                    dropdownOption={this.state.selectedComment}
                                /> : null
                            }
                            <div className='row no-gutters'>
                                <Upload
                                    upload={this.props.plus}
                                    className={cx(this.props.BackgroundAttachment)}
                                    imgClassName={cx(styles.attachmentImg)}
                                    message='attachment'
                                    fileUpload={(file) => this.uploadFile(file, this.props.matchedData.id)}
                                />
                                {attachmentList}
                            </div>
                        </div>

                        <div className={cx('d-flex flex-column-reverse col-3')}>
                            <div className={cx('d-inline-block px-2 mt-2', styles.RadioRedContainer)}>
                                <span> <input type='radio' className={styles.RadioButtonRed} checked={this.state.relevant} onChange={(event) => this.handleRadioButton(event, 'relevant')} /></span>
                                <label className={styles.RadioButtonLabelRed}>{t('translation_docVerification:crc.relevant')}</label>
                            </div>
                            <div className={cx('d-inline-block mt-2 px-2', styles.RadioGreenContainer)}>
                                <span> <input type='radio' className={styles.RadioButtonGreen} checked={!this.state.relevant} onChange={(event) => this.handleRadioButton(event, 'nonRelevant')} /></span>
                                <label className={styles.RadioButtonLabelGreen}>{t('translation_docVerification:crc.nonrelevant')}</label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        );
    }
}

const mapStateToProps = state => {
    return {
        attachmentUrl: state.workloadMgmt.attachmentUrl.downloadURL,
        attachmentUrlState: state.workloadMgmt.attachmentUrl.addDocumentState,
        dataId: state.workloadMgmt.attachmentUrl.dataId,
        deleteDocumentState:state.workloadMgmt.attachmentUrl.deleteDocumentState,
        uploadType: state.workloadMgmt.attachmentUrl.addDocumentType,
        deleteType: state.workloadMgmt.attachmentUrl.deleteDocumentType,
        downloadAttachmentState: state.workloadMgmt.attachmentUrl.downloadAttachmentState
    }
}

const mapDispatchToProps = dispatch => {
    return {
        onImageAdded: (type, formData,serviceRequestId, dataId) => dispatch(actions.addImage(type, formData,serviceRequestId, dataId)),
        onImageDeleted: (type, dataId, fileName, url) => dispatch(actions.deleteImage(type, dataId, fileName, url)),
        downloadAttachment: (url) => dispatch(actions.downloadAttachment(url))
    }
}
export default withTranslation()(connect(mapStateToProps, mapDispatchToProps)(CaseInfoCard));